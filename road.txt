
# NGINX Installation and Setup

## Step 1: Write the Dockerfile for NGINX

```Dockerfile
FROM debian:bookworm-slim

# Install NGINX and OpenSSL for SSL certificates
RUN apt-get update && apt-get install -y nginx openssl

# Create directory for SSL certificates
RUN mkdir -p /etc/ssl

# Generate self-signed SSL certificate
RUN openssl req -x509 -nodes -days 365 \
    -newkey rsa:2048 -keyout /etc/ssl/nginx-selfsigned.key \
    -out /etc/ssl/nginx-selfsigned.crt \
    -subj "/C=FR/ST=Occitanie/L=Perpignan/O=42/CN=svanmarc.42.fr"

# Create directory for NGINX content
RUN mkdir -p /var/www/nginx

# Copy the default NGINX configuration
COPY conf/default /etc/nginx/sites-available/default

# Set proper permissions
RUN chmod 755 /var/www/html && chown -R www-data /var/www/nginx

# Expose port 443 for HTTPS
EXPOSE 443

# Start NGINX in the foreground
CMD ["nginx", "-g", "daemon off;"]
```

## Step 2: Modify the NGINX Configuration

Hereâ€™s the basic `default` configuration for NGINX with SSL:

```nginx
events {
}

http {
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;

        ssl_certificate /etc/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        root /var/www/html;
        index index.php;

        server_name _;

        location / {
            try_files $uri $uri/ =404;
        }
    }
}
```

## Step 3: Build and Test NGINX

- Build the Docker image:
  ```bash
  docker build -t custom-nginx .
  ```

- Run the NGINX container:
  ```bash
  docker run -d --name nginx-test -p 443:443 custom-nginx
  ```

- Test HTTPS with `curl`:
  ```bash
  curl -k https://localhost
  ```

## Problems and Solutions:

1. **Problem: "events" directive error in NGINX configuration**  
   **Solution**: The `events` block was misplaced inside the `default` configuration. It should be in the main configuration file, not inside `default`.

2. **Problem: Self-signed certificate warning with `curl`**  
   **Solution**: Use `curl -k` to ignore SSL verification errors during local testing.



# MariaDB Installation and Setup

## Step 1: Write the Dockerfile for MariaDB

```Dockerfile
FROM debian:bookworm-slim

# Expose port 3306 for MariaDB
EXPOSE 3306

# Install MariaDB server
RUN apt-get update && apt-get install -y mariadb-server

# Create necessary directories
RUN mkdir -p /var/lib/mysql

# Copy the initialization script and configuration file
COPY tools/script.sh /
RUN chmod +x /script.sh
COPY conf/50-server.cnf /etc/mysql/mariadb.conf.d/50-server.cnf

# Use the script as the entry point
ENTRYPOINT ["bash", "/script.sh"]
```

## Step 2: MariaDB Configuration

The custom configuration file (`50-server.cnf`) contains:

```ini
[mysqld]
datadir=/var/lib/mysql
bind-address = 0.0.0.0
port = 3306
user = mysql
```

## Step 3: Initialization Script (`script.sh`)

```bash
#!/bin/bash

# Start MariaDB service
service mariadb start

# Create database and user if they do not exist
mysql -e "CREATE DATABASE IF NOT EXISTS \`${MYSQL_DATABASE}\`;"
mysql -e "CREATE USER IF NOT EXISTS \`${MYSQL_USER}\`@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';"
mysql -e "GRANT ALL PRIVILEGES ON \`${MYSQL_DATABASE}\`.* TO \`${MYSQL_USER}\`@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';"
mysql -e "FLUSH PRIVILEGES;"

# Stop MariaDB service
service mariadb stop

# Start MariaDB in foreground
exec mysqld
```

## Step 4: Build and Test MariaDB

- Build the MariaDB image:
  ```bash
  docker build -t custom-mariadb .
  ```

- Run the MariaDB container:
  ```bash
  docker run -d --name mariadb-test -e MYSQL_ROOT_PASSWORD=rootpw -e MYSQL_DATABASE=wordpress_db -e MYSQL_USER=wp_boss -e MYSQL_PASSWORD=123456 -p 3307:3306 custom-mariadb
  ```

- Connect to the MariaDB database:
  ```bash
  mysql -h 127.0.0.1 -P 3307 -u wp_boss -p123456 wordpress_db
  ```

## Problems and Solutions:

1. **Problem: "bind: address already in use" error on port 3306**  
   **Solution**: The local MariaDB service was running on port 3306. Stopped the local MariaDB service using `sudo service mariadb stop`.

2. **Problem: Incorrect database name error (`''`)**  
   **Solution**: Ensure that the environment variables (`MYSQL_DATABASE`, `MYSQL_USER`, `MYSQL_PASSWORD`) are correctly passed when starting the container.
